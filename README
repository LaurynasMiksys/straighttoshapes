This is the software bundle "StraightToShapes", build on top of the "Semantic Paint" framework was created by:

Saumya Jetley <sjetley@robots.ox.ac.uk>
Michael Sapienza <mikesapi.oxford@gmail.com>
Stuart Golodetz <stuart.golodetz@eng.ox.ac.uk>
Philip H S Torr <philip.torr@eng.ox.ac.uk>

It is built around Darknet, an open source neural network framework written in C and CUDA,
and several modules used in the original SemanticPaint framework.

1. Building the System
----------------------

1.1 Overview

StraightToShapes builds with CMake 2.8 and above on Ubuntu.
It has been tested on 14.04 and 16.04.

1.2 Dependencies

StraightToShapes depends on various 3rd party libraries.

Suitable versions of the required dependencies and some of the optional
dependencies have been included in the repository, so StraightToShapes should
build "out of the box".

  - Boost (version 1.59.0)
    Status: Required

  - CUDA (version 7.5)
    Status: Optional (needed for GPU acceleration)
    Default: Enabled
    Flag: WITH_CUDA

  - Eigen (version 3.2.2)
    Status: Required

  - OpenCV (version 3.1.0)
    Status: Required
    Default: Enabled

  - OpenMP
    Status: Optional, but recommended (needed for faster training/prediction)
    Default: Disabled
    Flag: WITH_OPENMP
    Notes: Doesn't work on Mac OS X

  - Torch
    Status: Optional, but needed to use the autoencoder embeddings
    Default: Disabled
    Flag: WITH_TORCH

1.3 Build Process

Common steps:

  a) Choose a root directory, hereafter referred to as <root>.

  b) Clone StraightToShapes into <root>/straighttoshapes, e.g.

     $ git clone git@github.com:torrvision/straighttoshapes.git

  c) Change to the straighttoshapes directory:

     $ cd straighttoshapes

1.3.1 Build Process (Unix)

  d) Run the top-level build script:

     $ ./build-nix.sh "Unix Makefiles" Release

  e) Change to the build directory and run ccmake:

     $ cd build
     $ ccmake ..

  f) Enable any optional libraries (Like CUDNN, OPENMP, TORCH). Note that you will need to install these manually and supply the paths.

  g) Reconfigure and regenerate the makefile.

  h) Build with the optional libraries enabled, e.g.

     $ make -j4

2. Preparing some data
---------------------

First prepare a data directory for the straighttoshapes application.

$ mkdir path/to/straighttoshapes/data

In the data directory, the vanilla application expects to find three directories:
$ cd path/to/straightoshapes/data
$ mkdir models results datasets

datasets - to hold the datasets
models - to hold commonly used models
results - to output results from training or evaluation modes.


First lets populate the models directory with frequently used models by downloading them into the models directory:

$ cd models

- Initialisation
The weights used to initialise the network before training.
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/extraction.conv.weights

- Bounding box detection
The weights trained on SBD dataset, yolo configuration file, bounding box detection, 0 parameters per shape, trained on train set.
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/sbd-yolo-bbox-c20-sp0-train.weights

- Shape detection with 16x16 masks (256 dims) to represent the shapes
The weights trained on SBD dataset, yolo configuration file, shape mask with 256 parameters per shape, trained on train, used to test on YouTube videos.
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/sbd-yolo-mask-c20-sp256-train.weights

The weights trained on SBD dataset, yolo configuration file, shape mask with 256 parameters per shape, trained on train and val.txt set, used to test on YouTube videos
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/sbd-yolo-mask-c20-sp256-trainval-demo.weights

- Shape detection with autoencoder embeddings (20 and 50 dims)
The weights trained on SBD dataset, yolo configuration file, shape embedding with 50 parameters per shape, trained on train and val set, used to test on YouTube videos
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/sbd-yolo-embedding-c20-sp50-trainval-demo.weights

- The weights trained on SBD dataset, yolo configuration file, shape embedding with 20 parameters per shape, trained on train, used to test on YouTube videos
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/sbd-yolo-embedding-c20-sp20-train.weights


3.  Running the System
---------------------

The build process will build various applications, libraries and test
programs in <root>/straighttoshapes/build. The main application can be found at:

$<root>/build/bin/apps/vanilla/vanilla

It can be run "out of the box" from any working directory,
provided that suitable parameters are provided.

Examples:

# In order to run the YOLO-style bounding box detection live from a webcam:

$ ./build/bin/apps/vanilla/vanilla -d /path/to/straighttoshapes/data -m demo --task detection

The arguments specify the location of the data directory '-d', the mode of use '-m', and the object encoding to use '--encoding'.
The application will automatically look for the file "sbd-yolo-bbox-c20-sp0-train.weights" in the data/models/ directory.

A path to a custom weights file may be provided using the '-w' option.
A list of all the input arguments can be output by running:

$ ./build/bin/apps/vanilla/vanilla --help

# In order to run the YOLO-style bounding box detection on a single image:
$ ./build/bin/apps/vanilla/vanilla -d /path/to/straighttoshapes/data -m test --task detection -i ./apps/vanilla/resources/2008_001122.jpg -t 0.2

# In order to run the StraightToShapes (STS) demo with 16x16 shape masks on an image, change the task to 'shapeprediction':
$ ./build/bin/apps/vanilla/vanilla -d /path/to/straighttoshapes/data -m test --task shapeprediction -i ./apps/vanilla/resources/2008_001122.jpg -t 0.2

# In order to run the StraightToShapes (STS) demo with 16x16 shape masks on a disk based video file:
$ ./build/bin/apps/vanilla/vanilla -d /path/to/straighttoshapes/data -m demo -v /path/to/video/file.mp4 --task shapeprediction


4. Running the System with the learned embeddings
---------------------

Go back to the models directory created previously, and create a new directory called autoencoder:
$ cd path/to/straightoshapes/data/models
$ mkdir autoencoder && cd autoencoder

Next download the pre-learned models:
The weights used to initialise the autoencoder which reduces the dimensionality of the input to 20 dimensions
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/autoencoder/model_20.net

The weights used to initialise the autoencoder which reduces the dimensionality of the input to 50 dimensions
$ wget http://www.robots.ox.ac.uk/~tvg/projects/StraightToShapes/data/models/autoencoder/model_50.net

***Make sure that the Torch dependency is installed*** 

Turn on the WITH_TORCH flag in Cmake.
$ cd straighttoshapes/build/
$ ccmake ..

Examples:
# In order to run STS with a 50-dim shape AE representation on an image:
$ ./build/bin/apps/vanilla/vanilla -d /path/to/straighttoshapes/data -m test --task shapeprediction -i ./apps/vanilla/resources/2008_001122.jpg --encoding embedding --shapeparams 50 -t 0.2

# In order to run STS with a 20-dim shape AE representation on an image:
$ ./build/bin/apps/vanilla/vanilla -d /path/to/straighttoshapes/data -m test --task shapeprediction -i ./apps/vanilla/resources/2008_001122.jpg --encoding embedding --shapeparams 20 -t 0.2

# In order to run the STS demo live from a webcam:
$ ./build/bin/apps/vanilla/vanilla -d /path/to/straighttoshapes/data -m demo --task shapeprediction --encoding embedding --shapeparams 50


5. Training and evaluation
TODO: this requires the setup of the datasets..


3. Additional Documentation
---------------------------

Further details about the original concept for StraightToShapes
found in the following paper:

StraightToShapes: Real-time Detection of Encoded Shapes.
ArXiV 2016
Link: https://arxiv.org/pdf/1611.07932v1.pdf
